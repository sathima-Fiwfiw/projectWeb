import {
  ChangeDetectionStrategy,
  Component,
  computed,
  signal,
} from '@angular/core';
import { FormsModule } from '@angular/forms';
import { CommonModule, DecimalPipe } from '@angular/common';

// ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
interface Transaction {
  date: string; // ‡πÄ‡∏ä‡πà‡∏ô '2025-09-30'
  type: string; // ‡πÄ‡∏ä‡πà‡∏ô '‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô'
  amount: number;
}

@Component({
  selector: 'app-wallet',
  standalone: true,
  // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô: CommonModule ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö @for, @if, Pipes ‡πÅ‡∏•‡∏∞ FormsModule ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö [(ngModel)]
  imports: [CommonModule, FormsModule, DecimalPipe],
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: `
    <div class="wallet-container">
      <div class="wallet-content-wrapper">
        <!-- 1. ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ -->
        <div class="section-block">
          <h2 class="section-title">‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠</h2>
          <div class="balance-card">
            <div class="balance-display">
              <!-- ‡πÉ‡∏ä‡πâ Unicode Icon ‡πÅ‡∏ó‡∏ô MatIcon ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡∏à‡∏≥‡∏Å‡∏±‡∏î -->
              <span class="wallet-icon">üí≥</span>
              <span class="current-balance-text">
                {{ currentBalance() | number }}
              </span>
            </div>
          </div>
        </div>

        <!-- 2. ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô -->
        <h2 class="section-title">‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô</h2>
        <div class="topup-box">
          <!-- ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏£‡∏π‡∏õ -->
          <div class="predefined-amounts">
            @for (amount of predefinedAmounts; track amount) {
            <button
              (click)="selectAmount(amount)"
              class="amount-button"
              [class.selected]="selectedAmount() === amount"
            >
              {{ amount | number }} ‡∏ø
            </button>
            }
          </div>

          <!-- ‡∏ä‡πà‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏≠‡∏á -->
          <div class="custom-amount-area">
            <p class="custom-amount-label">‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô</p>
            <input
              type="number"
              class="custom-input"
              placeholder="100"
              [ngModel]="customAmount()"
              (ngModelChange)="onCustomAmountChange($event)"
              min="100"
              autocomplete="off"
            />
          </div>

          <!-- ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏´‡∏•‡∏±‡∏Å -->
          <button
            (click)="confirmTopUp()"
            [disabled]="topUpAmount() < 100"
            class="topup-button"
            [class.disabled]="topUpAmount() < 100"
          >
            ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô ({{ topUpAmount() | number }} ‡∏ø)
          </button>
        </div>

        <!-- 3. ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ -->
        <h2 class="section-title">‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</h2>
        <div class="history-box">
          @for (transaction of transactionHistory(); track transaction; let last
          = $last) {
          <div class="history-item" [class.no-border]="last">
            <span class="history-date">{{ transaction.date }}</span>
            <span class="history-type">{{ transaction.type }}</span>
            <span
              class="history-amount"
              [class.positive]="transaction.amount > 0"
            >
              <!-- ‡πÅ‡∏™‡∏î‡∏á + ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ Pipe ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç -->
              {{ transaction.amount > 0 ? '+' : ''
              }}{{ transaction.amount | number }} ‡∏ø
            </span>
          </div>
          } @empty {
          <div class="no-history">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</div>
          }
        </div>
      </div>
    </div>
  `,
  styles: [
    `
      /* -------------------- Global Styles -------------------- */
      .wallet-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 1rem;
        background-color: #f7f7f7;
        min-height: 100vh;
        font-family: 'Inter', sans-serif;
      }
      .wallet-content-wrapper {
        width: 100%;
        max-width: 448px;
      }
      .section-block {
        margin-bottom: 2rem;
      }
      .section-title {
        font-size: 1.25rem;
        font-weight: bold;
        color: #dc2626; /* Red color */
        text-align: center;
        margin-bottom: 1rem;
      }

      /* -------------------- 1. Balance Section -------------------- */
      .balance-card {
        background-color: white;
        padding: 1rem;
        border-radius: 0.75rem;
        border: 1px solid #e5e7eb;
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1),
          0 4px 6px -4px rgba(0, 0, 0, 0.05); /* Soft Shadow */
      }
      .balance-display {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 1rem;
      }
      .wallet-icon {
        font-size: 1.875rem;
        color: #dc2626;
      }
      .current-balance-text {
        font-size: 2.25rem;
        font-weight: 800;
        color: #1f2937;
      }

      /* -------------------- 2. Topup Section -------------------- */
      .topup-box {
        background-color: white;
        padding: 1.5rem;
        border-radius: 0.75rem;
        box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25); /* Stronger Shadow */
        margin-bottom: 2rem;
      }
      .predefined-amounts {
        display: flex;
        justify-content: center;
        gap: 0.75rem;
        margin-bottom: 1.5rem;
      }
      .amount-button {
        padding: 0.5rem;
        border-radius: 0.5rem;
        font-weight: 600;
        transition: all 0.15s ease-in-out;
        width: 6rem;
        border: 1px solid #d1d5db; /* Light gray border */
        background-color: #f3f4f6;
        color: #374151;
        cursor: pointer;
      }
      .amount-button:hover {
        background-color: #e5e7eb;
      }
      .amount-button.selected {
        background-color: #dc2626;
        color: white;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        border-color: #dc2626;
        transform: translateY(-2px);
      }

      .custom-amount-area {
        text-align: center;
        margin-bottom: 1rem;
      }
      .custom-amount-label {
        color: #4b5563;
        font-weight: 500;
        margin-bottom: 0.5rem;
      }
      .custom-input {
        width: 100%;
        padding: 0.5rem;
        border: 2px solid #d1d5db;
        border-radius: 0.5rem;
        text-align: left;
        font-size: 1rem;
        font-family: monospace;
        transition: border-color 0.15s;
      }
      .custom-input:focus {
        border-color: #ef4444;
        // outline: none;
      }

      .topup-button {
        width: 100%;
        padding: 0.75rem;
        border-radius: 0.5rem;
        font-size: 1rem;
        font-weight: bold;
        transition: all 0.15s ease-in-out;
        cursor: pointer;
        border: none;
      }
      .topup-button:not(.disabled) {
        background-color: #dc2626;
        color: white;
        box-shadow: 0 10px 15px -3px rgba(252, 165, 165, 0.5); /* Custom red shadow */
      }
      .topup-button:not(.disabled):hover {
        background-color: #b91c1c;
      }
      .topup-button.disabled {
        background-color: #d1d5db;
        color: #6b7280;
        cursor: not-allowed;
        box-shadow: none;
      }

      /* -------------------- 3. History Section -------------------- */
      .history-box {
        background-color: white;
        padding: 1rem;
        border-radius: 0.75rem;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1),
          0 2px 4px -2px rgba(0, 0, 0, 0.05);
        border: 1px solid #f3f4f6;
      }
      .history-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.75rem 0.5rem;
        font-size: 1rem;
        border-bottom: 1px solid #f3f4f6;
      }
      .history-item.no-border {
        border-bottom: none;
      }
      .history-date {
        color: #6b7280;
        width: 30%;
      }
      .history-type {
        color: #374151;
        font-weight: 500;
        width: 30%;
      }
      .history-amount {
        font-weight: bold;
        text-align: right;
        width: 40%;
        color: #1f2937;
      }
      .history-amount.positive {
        color: #16a34a; /* Green for top-up */
      }
      .no-history {
        text-align: center;
        color: #6b7280;
        padding: 1rem;
      }

      /* Clean up spinner buttons for number input */
      .custom-input::-webkit-outer-spin-button,
      .custom-input::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
      }
      .custom-input {
        -moz-appearance: textfield; /* Firefox */
      }
    `,
  ],
})
export class Wallet {
  // 1. State Signals
  // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (10,100)
  currentBalance = signal<number>(10100);
  predefinedAmounts: number[] = [100, 200, 500];
  selectedAmount = signal<number | null>(null);
  // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô 100 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏° "‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô" ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
  customAmount = signal<number | null>(100);

  transactionHistory = signal<Transaction[]>([
    { date: '2025-09-30', type: '‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô', amount: 100 },
    { date: '2025-09-28', type: '‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô', amount: 200 },
    { date: '2025-09-28', type: '‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô', amount: 1000 },
  ]);

  // 2. Computed Signal: ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏ï‡∏¥‡∏°
  topUpAmount = computed<number>(() => {
    const selected = this.selectedAmount();
    const custom = this.customAmount();

    if (selected !== null) {
      return selected;
    }
    if (custom !== null && custom > 0) {
      return Math.floor(custom);
    }
    return 0;
  });

  // 3. Methods

  selectAmount(amount: number): void {
    this.selectedAmount.set(amount);
    this.customAmount.set(null); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ä‡πà‡∏≠‡∏á input
  }

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡∏≠‡∏á input ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå selection
  onCustomAmountChange(value: string): void {
    const amount = parseFloat(value);

    if (!isNaN(amount) && amount > 0) {
      this.customAmount.set(amount);
      this.selectedAmount.set(null); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏∏‡πà‡∏°
    } else {
      this.customAmount.set(null);
    }
  }

  confirmTopUp(): void {
    const amountToTopUp = this.topUpAmount();

    if (amountToTopUp < 100) {
      console.error('‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡∏∑‡∏≠ 100 ‡∏ø');
      return;
    }

    this.currentBalance.update((balance) => balance + amountToTopUp);

    const newTransaction: Transaction = {
      date: new Date().toISOString().substring(0, 10),
      type: '‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô',
      amount: amountToTopUp,
    };

    this.transactionHistory.update((history) => [newTransaction, ...history]);

    this.selectedAmount.set(null);
    this.customAmount.set(null);

    console.log(
      `‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: +${amountToTopUp} ‡∏ø. ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà: ${this.currentBalance()}`
    );
  }
}
